#!/bin/bash

# ==========================================
# Human Variant Calling & Annotation Pipeline
# Author: Gerald Mboowa
# Version: 1.0.0
# ==========================================

start=$SECONDS
echo "Running on host: $HOSTNAME"

# Metadata
echo -e "Written by \e[32mGerald Mboowa\e[0m"
echo -e "This is \e[36mFastQC MultiQC Human Variant Calling Script Version 1.0.0\e[0m"
echo -e "Author email: \e[33m...@gmail.com or ...@chs.mak.ac.ug or ...@bcm.edu or ...@alumni.bcm.edu or ...@cam.ac.uk\e[0m"

# Change to working directory
cd ~/working-directory || { echo "Working directory not found! Exiting."; exit 1; }

# Run FastQC
echo -e "\e[32mNow Running FastQC for the FASTQ Samples\e[0m"
for sample in $(cat list.txt); do
    fastqc "${sample}"*_1.fastq.gz "${sample}"*_2.fastq.gz
done

# Run MultiQC
echo -e "\e[36mNow Running MultiQC for the FastQC Results\e[0m"
multiqc .

# Process each sample
for sample in $(cat list.txt); do
    R1=${sample}_R1.fastq.gz
    R2=${sample}_R2.fastq.gz

    # Step 1: Alignment using BWA
    echo -e "\e[31mNow Running Alignment of FASTQ reads using BWA\e[0m"
    bwa mem -R "@RG\\tID:0\\tSM:${sample}\\tPL:Illumina" ~/human_g1k_v37.fa "$R1" "$R2" > "${sample}.sam"

    # Step 2: Convert SAM to BAM
    echo -e "\e[31mConverting SAM to BAM using Samtools\e[0m"
    samtools view -bh "${sample}.sam" > "${sample}.bam"

    # Step 3: Sort BAM
    echo -e "\e[31mSorting BAM using PicardTools\e[0m"
    java -jar ~/picard.jar SortSam I="${sample}.bam" O="${sample}_sorted.bam" SORT_ORDER=coordinate

    # Step 4: Mark Duplicates
    echo -e "\e[31mMarking PCR Duplicates using PicardTools\e[0m"
    java -Xmx4g -jar ~/picard-tools-1.119/MarkDuplicates.jar \
        INPUT="${sample}_sorted.bam" \
        OUTPUT="${sample}_sorted_dedup_reads.bam" \
        METRICS_FILE="${sample}_picard_info.txt" \
        REMOVE_DUPLICATES=true \
        ASSUME_SORTED=true \
        VALIDATION_STRINGENCY=LENIENT

    # Step 5: Index BAM
    echo -e "\e[31mIndexing BAM using Samtools\e[0m"
    samtools index "${sample}_sorted_dedup_reads.bam"

    # Step 6: Realignment Target Creation
    echo -e "\e[31mCreating Realignment Targets using GATK\e[0m"
    java -jar ~/GenomeAnalysisTK.jar -T RealignerTargetCreator \
        -R ~/human_g1k_v37.fa \
        -I "${sample}_sorted_dedup_reads.bam" \
        --known ~/Know-snps-Indels/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.gz \
        -o "${sample}_forIndelRealigner.intervals"

    # Step 7: Indel Realignment
    echo -e "\e[31mRunning Indel Realignment using GATK\e[0m"
    java -jar ~/GenomeAnalysisTK.jar -T IndelRealigner \
        -R ~/human_g1k_v37.fa \
        -I "${sample}_sorted_dedup_reads.bam" \
        -known ~/Know-snps-Indels/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.gz \
        -targetIntervals "${sample}_forIndelRealigner.intervals" \
        -o "${sample}_Realigned_sorted_dedup_reads.bam"

    # Step 8: Base Quality Score Recalibration (BQSR)
    echo -e "\e[31mRunning Base Recalibration using GATK\e[0m"
    java -jar ~/GenomeAnalysisTK.jar -T BaseRecalibrator \
        -R ~/human_g1k_v37.fasta \
        -I "${sample}_sorted_dedup_reads.bam" \
        -knownSites ~/Know-snps-Indels/dbsnp.147.vcf.gz \
        -o "${sample}_recal.table"

    # Step 9: Print Reads after BQSR
    echo -e "\e[31mPrinting Recalibrated Reads using GATK\e[0m"
    java -jar ~/GenomeAnalysisTK.jar -T PrintReads \
        -R ~/human_g1k_v37.fasta \
        -I "${sample}_Realigned_sorted_dedup_reads.bam" \
        -BQSR "${sample}_recal.table" \
        -o "${sample}_Re_calibrated_Realigned_sorted_dedup.bam"

    # Step 10: Variant Calling
    echo -e "\e[31mCalling Variants using GATK HaplotypeCaller\e[0m"
    java -jar ~/GenomeAnalysisTK.jar -T HaplotypeCaller \
        -R ~/human_g1k_v37.fa \
        -I "${sample}_Re_calibrated_Realigned_sorted_dedup.bam" \
        -o "${sample}_calls.vcf"

    # Step 11: Convert to Annovar Input
    echo -e "\e[31mConverting VCF to Annovar Input Format\e[0m"
    perl ~/annovar/convert2annovar.pl --includeinfo -format vcf4old "${sample}_calls.vcf" > "${sample}.avinput"

    # Step 12: Annotate Variants with Annovar
    echo -e "\e[31mAnnotating Variants using Annovar\e[0m"
    perl ~/annovar/table_annovar.pl "${sample}.avinput" ~/annovar/humandb/ \
        -buildver hg19 -out "${sample}_myanno" -remove \
        -protocol refGene,cytoBand,genomicSuperDups,snp138,esp6500siv2_all,ljb26_all,1000g2015aug_afr,1000g2015aug_eas,1000g2015aug_eur,avsift,clinvar_20180603,dbnsfp30a,icgc21,exac03,exac03nonpsych,gerp++elem,caddgt20,gnomad_exome,gnomad_genome \
        -operation g,r,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f \
        -nastring . -csvout
done

# Final message
echo -e "\e[33mBioinformatics is not something you are taught, itâ€™s a way of life?\e[0m"

# Show script duration
end=$SECONDS
echo "Total duration: $((end - start)) seconds."

# Done
exit 
