
#!/usr/bin/env bash
# ==============================================================================
# Genomic Analysis Pipeline - Human Whole Genome Sequencing
# Version: 2.0.0
# Author: Gerald Mboowa
# Contact: ...@bcm.edu | ...@cam.ac.uk
# 
# Features:
# - Comprehensive QC & preprocessing
# - GATK Best Practices variant calling
# - Multi-sample joint genotyping
# - Functional annotation integration
# ==============================================================================

set -eo pipefail
trap 'handle_error $LINENO' ERR

# Configuration
THREADS=$(nproc)
MEMORY="32G"
REF_GENOME="$HOME/resources/human_g1k_v37.fa"
KNOWN_SITES=(
    "$HOME/resources/dbsnp.147.vcf.gz"
    "$HOME/resources/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.gz"
)
ANNOVAR_DB="$HOME/annovar/humandb/"
OUTPUT_DIR="results"
LOG_DIR="$OUTPUT_DIR/logs"

# Initialize directories
mkdir -p "$OUTPUT_DIR/"{alignment,vcfs,annotations} "$LOG_DIR"

# Functions
handle_error() {
    local line=$1
    echo "Error occurred at line $line"
    exit 1
}

log() {
    local level=$1 msg=$2
    printf "[%(%Y-%m-%dT%H:%M:%S)T] [%s] %s\n" -1 "$level" "$msg" | tee -a "$LOG_DIR/pipeline.log"
}

run_step() {
    local step_name=$1 cmd=$2
    log "INFO" "Starting $step_name"
    eval "$cmd" 2>> "$LOG_DIR/${step_name// /_}.log" || {
        log "ERROR" "$step_name failed"
        exit 1
    }
    log "INFO" "Completed $step_name"
}

# Pipeline
main() {
    log "INFO" "Pipeline started - Host: $HOSTNAME"
    
    # FastQC Analysis
    run_step "FastQC" \
        "fastqc -t $THREADS -o $OUTPUT_DIR/qc inputs/*.fastq.gz"

    # MultiQC Report
    run_step "MultiQC" \
        "multiqc -o $OUTPUT_DIR/qc $OUTPUT_DIR/qc"

    # Process Samples
    while read -r sample; do
        local r1="inputs/${sample}_R1.fastq.gz"
        local r2="inputs/${sample}_R2.fastq.gz"

        # Alignment
        run_step "BWA Alignment ($sample)" \
            "bwa mem -t $THREADS -R \"@RG\tID:$sample\tSM:$sample\tPL:ILLUMINA\" $REF_GENOME $r1 $r1 | samtools sort -@4 -o $OUTPUT_DIR/alignment/${sample}.bam"

        # Mark Duplicates
        run_step "Mark Duplicates ($sample)" \
            "gatk MarkDuplicates -I $OUTPUT_DIR/alignment/${sample}.bam -O $OUTPUT_DIR/alignment/${sample}.dedup.bam --METRICS_FILE $OUTPUT_DIR/alignment/${sample}.metrics.txt"

        # BQSR
        run_step "Base Recalibration ($sample)" \
            "gatk BaseRecalibrator -I $OUTPUT_DIR/alignment/${sample}.dedup.bam -R $REF_GENOME --known-sites ${KNOWN_SITES[@]} -O $OUTPUT_DIR/alignment/${sample}.recal.table"

        # Apply BQSR
        run_step "Apply BQSR ($sample)" \
            "gatk ApplyBQSR -R $REF_GENOME -I $OUTPUT_DIR/alignment/${sample}.dedup.bam --bqsr-recal-file $OUTPUT_DIR/alignment/${sample}.recal.table -O $OUTPUT_DIR/alignment/${sample}.final.bam"

        # Variant Calling (GVCF)
        run_step "GVCF Generation ($sample)" \
            "gatk HaplotypeCaller -R $REF_GENOME -I $OUTPUT_DIR/alignment/${sample}.final.bam -O $OUTPUT_DIR/vcfs/${sample}.g.vcf.gz -ERC GVCF"
    done < samples.list

    # Joint Genotyping
    run_step "Joint Genotyping" \
        "gatk GenomicsDBImport -R $REF_GENOME --genomicsdb-workspace-path $OUTPUT_DIR/vcfs/genomics_db -V samples.list"

    run_step "Joint Calling" \
        "gatk GenotypeGVCFs -R $REF_GENOME -V gendb://$OUTPUT_DIR/vcfs/genomics_db -O $OUTPUT_DIR/vcfs/joint_calls.vcf.gz"

    # Variant Annotation
    run_step "ANNOVAR Annotation" \
        "perl $HOME/annovar/table_annovar.pl $OUTPUT_DIR/vcfs/joint_calls.vcf.gz $ANNOVAR_DB -buildver hg19 -out $OUTPUT_DIR/annotations/final -protocol refGene,ensGene,gnomad211_genome,clinvar_20220320 -operation g,g,f,f -nastring . -vcfinput"

    log "INFO" "Pipeline completed successfully"
}

main "$@"
