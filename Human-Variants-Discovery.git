#!/bin/bash
# Title: Comprehensive FastQC, MultiQC, and Variant Calling Workflow
# Author: Gerald Mboowa
# Description: This script performs FastQC, MultiQC, alignment, variant calling, and annotation of human genome sequencing data.
# It integrates tools like BWA, Samtools, GATK, and Annovar for a complete variant discovery workflow.

# Start timing the script execution
start_time=$(date +%s)

# Display metadata
echo $HOSTNAME
echo $"Written by Gerald Mboowa 🙏🧘 🍷🐒😍 ☣ 🇩🇪" | sed $'s/Gerald Mboowa 🙏🧘 🍷🐒😍 ☣ 🇩🇪 /\e[32m&\e[0m/'
echo $"FastQC MultiQC Human Variant Calling Script Version 1.0.0" | sed $'s/FastQC MultiQC Human Variant Calling Script Version 1.0.0/\e[36m&\e[0m/'
echo $"Author email: ...@gmail.com or ...@chs.mak.ac.ug or ...@bcm.edu or ...@alumni.bcm.edu or ...@cam.ac.uk" | sed $'s/...@gmail.com or ...@chs.mak.ac.ug or ...@bcm.edu or ...@alumni.bcm.edu or ...@cam.ac.uk/\e[33m&\e[0m/'

# Step 1: Navigate to the working directory
cd ~/working-directory || { echo "Error: Working directory not found!"; exit 1; }

# Step 2: Run FastQC on input FASTQ files
echo $"Running FastQC for the FASTQ samples" | sed $'s/Running FastQC for the FASTQ samples/\e[32m&\e[0m/'
for sample in $(cat list.txt); do
    fastqc "${sample}"*_1.fastq.gz "${sample}"*_2.fastq.gz
done

# Step 3: Run MultiQC to aggregate FastQC results
echo $"Running MultiQC for FastQC products" | sed $'s/Running MultiQC for FastQC products/\e[36m&\e[0m/'
multiqc .

# Step 4: Process each sample for alignment, variant calling, and annotation
for sample in $(cat list.txt); do
    R1="${sample}_R1.fastq.gz"
    R2="${sample}_R2.fastq.gz"

    # Step 4.1: Align reads using BWA
    echo $"Aligning reads for $sample using BWA" | sed $'s/Aligning reads for $sample using BWA/\e[31m&\e[0m/'
    bwa mem -R "@RG\tID:0\tSM:${sample}\tPL:Illumina" ~/human_g1k_v37.fa "$R1" "$R2" > "${sample}.sam"

    # Step 4.2: Convert SAM to BAM using Samtools
    echo $"Converting SAM to BAM for $sample" | sed $'s/Converting SAM to BAM for $sample/\e[31m&\e[0m/'
    samtools view -bh "${sample}.sam" > "${sample}.bam"

    # Step 4.3: Sort BAM file using Picard
    echo $"Sorting BAM for $sample using Picard" | sed $'s/Sorting BAM for $sample using Picard/\e[31m&\e[0m/'
    java -jar ~/picard.jar SortSam INPUT="${sample}.bam" OUTPUT="${sample}_sorted.bam" SORT_ORDER=coordinate

    # Step 4.4: Mark PCR duplicates using Picard
    echo $"Marking PCR duplicates for $sample using Picard" | sed $'s/Marking PCR duplicates for $sample using Picard/\e[31m&\e[0m/'
    java -Xmx4g -jar ~/picard.jar MarkDuplicates INPUT="${sample}_sorted.bam" OUTPUT="${sample}_dedup.bam"         METRICS_FILE="${sample}_metrics.txt" REMOVE_DUPLICATES=true

    # Step 4.5: Index BAM file using Samtools
    echo $"Indexing BAM for $sample" | sed $'s/Indexing BAM for $sample/\e[31m&\e[0m/'
    samtools index "${sample}_dedup.bam"

    # Step 4.6: Realignment using GATK
    echo $"Realigning indels for $sample using GATK" | sed $'s/Realigning indels for $sample using GATK/\e[31m&\e[0m/'
    java -jar ~/GenomeAnalysisTK.jar -T RealignerTargetCreator -R ~/human_g1k_v37.fa -I "${sample}_dedup.bam"         --known ~/Known-snps-Indels/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.gz -o "${sample}_realigner.intervals"
    java -jar ~/GenomeAnalysisTK.jar -T IndelRealigner -R ~/human_g1k_v37.fa -I "${sample}_dedup.bam"         -targetIntervals "${sample}_realigner.intervals" -o "${sample}_realigned.bam"

    # Step 4.7: Base recalibration using GATK
    echo $"Recalibrating bases for $sample using GATK" | sed $'s/Recalibrating bases for $sample using GATK/\e[31m&\e[0m/'
    java -jar ~/GenomeAnalysisTK.jar -T BaseRecalibrator -R ~/human_g1k_v37.fa -I "${sample}_realigned.bam"         -knownSites ~/Known-snps-Indels/dbsnp.147.vcf.gz -o "${sample}_recal.table"
    java -jar ~/GenomeAnalysisTK.jar -T PrintReads -R ~/human_g1k_v37.fa -I "${sample}_realigned.bam"         -BQSR "${sample}_recal.table" -o "${sample}_final.bam"

    # Step 4.8: Variant discovery using GATK HaplotypeCaller
    echo $"Calling variants for $sample using GATK HaplotypeCaller" | sed $'s/Calling variants for $sample using GATK HaplotypeCaller/\e[31m&\e[0m/'
    java -jar ~/GenomeAnalysisTK.jar -T HaplotypeCaller -R ~/human_g1k_v37.fa -I "${sample}_final.bam"         -o "${sample}_variants.vcf"

    # Step 4.9: Variant annotation using Annovar
    echo $"Annotating variants for $sample using Annovar" | sed $'s/Annotating variants for $sample using Annovar/\e[31m&\e[0m/'
    perl ~/annovar/convert2annovar.pl -format vcf4old "${sample}_variants.vcf" > "${sample}_variants.avinput"
    perl ~/annovar/table_annovar.pl "${sample}_variants.avinput" ~/annovar/humandb/ -buildver hg19 -out "${sample}_annotated"         -remove -protocol refGene,cytoBand,snp138,clinvar_20180603 -operation g,r,f,f -nastring . -csvout
done

# End timing the script
end_time=$(date +%s)
execution_time=$((end_time - start_time))
echo "Workflow completed in $execution_time seconds."
